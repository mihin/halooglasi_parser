name: HaloOglasi Apartment Parser

on:
  workflow_dispatch:
  schedule:
    # Run 3 times daily: 7am, 1pm, 7pm UTC
    - cron: '0 7,13,19 * * *'

jobs:
  apartment-search:
    runs-on: ubuntu-latest
    name: Search and Notify
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create data and logs directories
      run: |
        mkdir -p data logs
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Download previous apartment tracking data
      id: download-tracking-data
      uses: dawidd6/action-download-artifact@v3
      with:
        name: apartment-ids
        path: data/
        workflow: apartment-parser.yml
        if_no_artifact_found: warn
      continue-on-error: true
      

    
    - name: Initialize tracking file if needed
      run: |
        if [ ! -f "data/apartment-ids.json" ]; then
          echo "üîÑ Creating new tracking file - all apartments will be marked as NEW"
          cat > data/apartment-ids.json << 'EOF'
        {
          "ids": [],
          "last_updated": "1970-01-01T00:00:00",
          "count": 0
        }
        EOF
        else
          echo "‚úÖ Previous tracking data restored"
        fi
    
    - name: Create config from secrets and variables
      run: |
        echo "üîß Creating configuration..."
        echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" > config.properties
        echo "NOTIFICATION_INTERVAL_HOURS=${{ vars.NOTIFICATION_INTERVAL_HOURS || '6' }}" >> config.properties
        
        # Debug Chat
        if [ -n "${{ vars.DEBUG_CHAT }}" ]; then
          echo "DEBUG_CHAT=${{ vars.DEBUG_CHAT }}" >> config.properties
        fi
        
        # Telegram Chat ID (exclusive mode)
        if [ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
          echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> config.properties
          echo "‚úÖ Exclusive chat mode enabled"
        else
          echo "‚úÖ Auto-discovery mode enabled"
        fi
        
        # Search Configuration Variables
        if [ -n "${{ vars.SEARCH_TYPE }}" ]; then
          echo "SEARCH_TYPE=${{ vars.SEARCH_TYPE }}" >> config.properties
        fi
        
        if [ -n "${{ vars.PRICE_FROM }}" ]; then
          echo "PRICE_FROM=${{ vars.PRICE_FROM }}" >> config.properties
        fi
        
        if [ -n "${{ vars.PRICE_TO }}" ]; then
          echo "PRICE_TO=${{ vars.PRICE_TO }}" >> config.properties
        fi
        
        if [ -n "${{ vars.APARTMENT_AREA_FROM }}" ]; then
          echo "APARTMENT_AREA_FROM=${{ vars.APARTMENT_AREA_FROM }}" >> config.properties
        fi
        
        if [ -n "${{ vars.APARTMENT_AREA_TO }}" ]; then
          echo "APARTMENT_AREA_TO=${{ vars.APARTMENT_AREA_TO }}" >> config.properties
        fi
        
        if [ -n "${{ vars.NUMBER_OF_ROOMS_FROM }}" ]; then
          echo "NUMBER_OF_ROOMS_FROM=${{ vars.NUMBER_OF_ROOMS_FROM }}" >> config.properties
        fi
        
        if [ -n "${{ vars.NUMBER_OF_ROOMS_TO }}" ]; then
          echo "NUMBER_OF_ROOMS_TO=${{ vars.NUMBER_OF_ROOMS_TO }}" >> config.properties
        fi
        
        if [ -n "${{ vars.FLOOR_FROM }}" ]; then
          echo "FLOOR_FROM=${{ vars.FLOOR_FROM }}" >> config.properties
        fi
        
        if [ -n "${{ vars.FLOOR_TO }}" ]; then
          echo "FLOOR_TO=${{ vars.FLOOR_TO }}" >> config.properties
        fi
        
    - name: Restore chat state (Auto-discovery mode only)
      id: restore-chat
      uses: dawidd6/action-download-artifact@v3
      with:
        name: chat-ids
        path: data/
        workflow: apartment-parser.yml
        if_no_artifact_found: warn
      continue-on-error: true
      
    - name: Initialize chat state file
      run: |
        # Only initialize chat state in auto-discovery mode
        if [[ -z "${{ vars.DEBUG_CHAT }}" && -z "${{ secrets.TELEGRAM_CHAT_ID }}" ]]; then
          if [ ! -f data/chat-ids.txt ]; then
            echo "üîÑ Creating empty chat state file"
            echo "# Telegram Chat IDs - one per line" > data/chat-ids.txt
            echo "# Lines starting with # are comments" >> data/chat-ids.txt
            echo "" >> data/chat-ids.txt
          fi
        fi
        
    - name: Run apartment search
      run: |
        echo "üè† Starting apartment search..."
        python scripts/run_search.py
        
    - name: Check Telegram results
      id: telegram-results
      run: |
        if [ -f "data/telegram_result.json" ]; then
          # Extract values from the JSON using Python for reliable parsing
          MESSAGES_SENT=$(python3 -c "import json; data=json.load(open('data/telegram_result.json')); print(data['messages_sent'])")
          CHATS_FOUND=$(python3 -c "import json; data=json.load(open('data/telegram_result.json')); print(data['chats_found'])")
          SUCCESS=$(python3 -c "import json; data=json.load(open('data/telegram_result.json')); print(str(data['success']).lower())")
          NEW_APARTMENTS=$(python3 -c "import json; data=json.load(open('data/telegram_result.json')); print(data['new_apartments_count'])")
          
          echo "messages_sent=$MESSAGES_SENT" >> $GITHUB_OUTPUT
          echo "chats_found=$CHATS_FOUND" >> $GITHUB_OUTPUT
          echo "success=$SUCCESS" >> $GITHUB_OUTPUT
          echo "new_apartments_count=$NEW_APARTMENTS" >> $GITHUB_OUTPUT
          
          echo "üìä Messages: $MESSAGES_SENT, Chats: $CHATS_FOUND, New apartments: $NEW_APARTMENTS"
        else
          echo "messages_sent=0" >> $GITHUB_OUTPUT
          echo "chats_found=0" >> $GITHUB_OUTPUT
          echo "success=false" >> $GITHUB_OUTPUT
          echo "new_apartments_count=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Ensure data files exist
      if: always()
      run: |
        # Ensure apartment tracking file exists
        if [ ! -f "data/apartment-ids.json" ]; then
          cat > data/apartment-ids.json << 'EOF'
        {
          "ids": [],
          "last_updated": "1970-01-01T00:00:00",
          "count": 0
        }
        EOF
        fi
        
        # Ensure chat state file exists (only in auto-discovery mode)
        if [[ -z "${{ vars.DEBUG_CHAT }}" && -z "${{ secrets.TELEGRAM_CHAT_ID }}" ]]; then
          if [ ! -f data/chat-ids.txt ]; then
            echo "# Telegram Chat IDs - one per line" > data/chat-ids.txt
            echo "# Lines starting with # are comments" >> data/chat-ids.txt
            echo "" >> data/chat-ids.txt
          fi
        fi
    

    
    - name: Decide apartment tracking upload
      if: always()
      run: |
        if [[ "${{ steps.telegram-results.outputs.success }}" == "true" || "${{ steps.telegram-results.outputs.new_apartments_count }}" == "0" ]]; then
          echo "‚úÖ Will upload apartment tracking"
        else
          echo "‚ùå Will NOT upload apartment tracking - prevents marking apartments as 'seen' when notifications failed"
        fi
        
    - name: Upload apartment tracking data
      if: always() && (steps.telegram-results.outputs.success == 'true' || steps.telegram-results.outputs.new_apartments_count == '0')
      uses: actions/upload-artifact@v4
      with:
        name: apartment-ids
        path: data/apartment-ids.json
        retention-days: 90
        if-no-files-found: warn
        
    - name: Decide chat state upload
      if: always()
      run: |
        # Upload if chats were found OR if in auto-discovery mode (no exclusive config)
        if [[ "${{ steps.telegram-results.outputs.chats_found }}" != "0" ]]; then
          echo "‚úÖ Will upload chat state - chats found"
        elif [[ -z "${{ secrets.TELEGRAM_CHAT_ID }}" && -z "${{ vars.DEBUG_CHAT }}" ]]; then
          echo "‚úÖ Will upload chat state - auto-discovery mode"
        else
          echo "‚ùå Will NOT upload chat state - exclusive mode"
        fi
        
    - name: Upload chat state
      if: always() && (steps.telegram-results.outputs.chats_found != '0' || (env.TELEGRAM_CHAT_ID == '' && env.DEBUG_CHAT == ''))
      uses: actions/upload-artifact@v4
      with:
        name: chat-ids
        path: data/chat-ids.txt
        retention-days: 90
        if-no-files-found: warn
      continue-on-error: true
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        DEBUG_CHAT: ${{ vars.DEBUG_CHAT }}
        
    - name: Clean up temporary files
      if: always()
      run: |
        rm -f data/halooglasi_data.json data/halooglasi_data.xlsx data/telegram_result.json
        rm -f logs/*.log 