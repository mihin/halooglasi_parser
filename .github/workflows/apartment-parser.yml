name: HaloOglasi Apartment Parser

on:
  workflow_dispatch:
  schedule:
    # Run 3 times daily: 7am, 1pm, 7pm UTC
    - cron: '0 7,13,19 * * *'

jobs:
  apartment-search:
    runs-on: ubuntu-latest
    name: Search and Notify
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Restore chat state
      id: restore-chat
      uses: actions/download-artifact@v4
      with:
        name: chat-ids-state
        path: .
      continue-on-error: true
      
    - name: Initialize chat state file
      run: |
        if [ ! -f chat_ids.txt ]; then
          echo "🔄 First run or no previous chat state found"
          echo "# Telegram Chat IDs - one per line" > chat_ids.txt
          echo "# Lines starting with # are comments" >> chat_ids.txt
          echo "" >> chat_ids.txt
          echo "✅ Initialized empty chat_ids.txt"
        else
          echo "✅ Restored previous chat state"
          echo "📋 Current chat IDs:"
          grep -v '^#' chat_ids.txt | grep -v '^$' || echo "  (no active chats yet)"
        fi
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create data and logs directories
      run: |
        mkdir -p data logs
    
    - name: Download previous apartment tracking data
      uses: actions/download-artifact@v4
      with:
        name: apartment-tracking-data
        path: data/
      continue-on-error: true
    
    - name: Initialize tracking file if needed
      run: |
        if [ ! -f "data/previous_apartment_ids.json" ]; then
          echo "📝 No previous tracking data (normal for first run)"
          echo "Creating new tracking file - all apartments will be marked as NEW"
          echo '[]' > data/previous_apartment_ids.json
        else
          echo "✅ Previous tracking data loaded successfully"
          echo "Will identify NEW vs EXISTING apartments"
        fi
    
    - name: Create config from secrets
      run: |
        echo "🔧 Creating configuration..."
        echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" > config.properties
        echo "NOTIFICATION_INTERVAL_HOURS=${{ vars.NOTIFICATION_INTERVAL_HOURS || '6' }}" >> config.properties
        echo "DEBUG_CHAT=${{ vars.DEBUG_CHAT || 'false' }}" >> config.properties
        if [ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
          echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> config.properties
          echo "✅ Exclusive chat mode enabled"
        else
          echo "✅ Auto-discovery mode enabled"
        fi
        
    - name: Run apartment search
      run: |
        echo "🏠 Starting apartment search..."
        python scripts/run_search.py
        echo "✅ Search completed"
    
    - name: Ensure tracking file exists before upload
      if: always()
      run: |
        if [ ! -f "data/previous_apartment_ids.json" ]; then
          echo "⚠️ Tracking file missing, creating empty one"
          echo '[]' > data/previous_apartment_ids.json
        fi
        echo "📁 Tracking file ready for upload"
    
    - name: Upload apartment tracking data for next run
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: apartment-tracking-data
        path: data/previous_apartment_ids.json
        retention-days: 90
    
    - name: Show updated chat state
      run: |
        echo "📋 Final chat state:"
        if [ -f chat_ids.txt ]; then
          grep -v '^#' chat_ids.txt | grep -v '^$' || echo "  (no active chats)"
        else
          echo "  (no chat_ids.txt file)"
        fi
        
    - name: Save chat state
      uses: actions/upload-artifact@v4
      with:
        name: chat-ids-state
        path: chat_ids.txt
        retention-days: 90
      if: always()  # Always save state, even if search fails
        
    - name: Clean up output files
      if: always()
      run: |
        # Remove all generated files except previous_apartment_ids.json
        rm -f data/halooglasi_data.json
        rm -f data/halooglasi_data.xlsx
        rm -f logs/*.log
        echo "🧹 Cleaned up temporary output files" 