name: HaloOglasi Apartment Parser

on:
  workflow_dispatch:
  schedule:
    # Run 3 times daily: 7am, 1pm, 7pm UTC
    - cron: '0 7,13,19 * * *'

jobs:
  apartment-search:
    runs-on: ubuntu-latest
    name: Search and Notify
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create data and logs directories
      run: |
        mkdir -p data logs
        
    - name: Restore chat state
      id: restore-chat
      uses: actions/download-artifact@v4
      with:
        name: chat-ids-state
        path: data/
      continue-on-error: true
      
    - name: Initialize chat state file
      run: |
        if [ ! -f data/chat_ids.txt ]; then
          echo "🔄 First run or no previous chat state found"
          echo "# Telegram Chat IDs - one per line" > data/chat_ids.txt
          echo "# Lines starting with # are comments" >> data/chat_ids.txt
          echo "" >> data/chat_ids.txt
          echo "✅ Initialized empty data/chat_ids.txt"
        else
          echo "✅ Restored previous chat state"
          echo "📋 Current chat IDs:"
          grep -v '^#' data/chat_ids.txt | grep -v '^$' || echo "  (no active chats yet)"
        fi
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Download previous apartment tracking data
      id: download-tracking-data
      uses: actions/download-artifact@v4
      with:
        name: apartment-tracking-data
        path: data/
        github-token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
    
    - name: Initialize tracking file if needed
      run: |
        if [ ! -f "data/previous_apartment_ids.json" ]; then
          echo "🔄 First run or no previous tracking data found"
          echo "📝 Creating new tracking file - all apartments will be marked as NEW"
          cat > data/previous_apartment_ids.json << 'EOF'
        {
          "ids": [],
          "last_updated": "1970-01-01T00:00:00",
          "count": 0
        }
        EOF
          echo "✅ Initialized empty apartment tracking file"
        else
          echo "✅ Previous tracking data restored successfully"
          echo "📊 Current tracking data:"
          cat data/previous_apartment_ids.json | head -10
          echo "Will identify NEW vs EXISTING apartments"
        fi
    
    - name: Create config from secrets
      run: |
        echo "🔧 Creating configuration..."
        echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" > config.properties
        echo "NOTIFICATION_INTERVAL_HOURS=${{ vars.NOTIFICATION_INTERVAL_HOURS || '6' }}" >> config.properties
        
        if [ -n "${{ secrets.DEBUG_CHAT }}" ]; then
          echo "DEBUG_CHAT=${{ secrets.DEBUG_CHAT }}" >> config.properties
          echo "🔧 DEBUG_CHAT set from repository secret"
        fi
        
        if [ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
          echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> config.properties
          echo "✅ Exclusive chat mode enabled"
        else
          echo "✅ Auto-discovery mode enabled"
        fi
        
        echo "📋 Generated config.properties:"
        cat config.properties
        
    - name: Run apartment search
      run: |
        echo "🏠 Starting apartment search..."
        echo "🔍 Current working directory: $(pwd)"
        echo "🔍 Files in workspace root:"
        ls -la | grep -E "(config\.properties)" || echo "  No config files found"
        echo "🔍 Files in data/ directory:"
        ls -la data/ | grep -E "(chat_ids\.txt|previous_apartment_ids\.json)" || echo "  No data files found"
        echo ""
        python scripts/run_search.py
        echo "✅ Search completed"
    
    - name: Finalize and upload persistent data
      if: always()
      run: |
        echo "📁 Preparing persistent data for upload..."
        
        # Ensure apartment tracking file exists
        if [ ! -f "data/previous_apartment_ids.json" ]; then
          echo "⚠️ Tracking file missing, creating empty one"
          cat > data/previous_apartment_ids.json << 'EOF'
        {
          "ids": [],
          "last_updated": "1970-01-01T00:00:00",
          "count": 0
        }
        EOF
        fi
        
        # Ensure chat state file exists
        if [ ! -f data/chat_ids.txt ]; then
          echo "⚠️ Chat state file missing, creating empty one"
          echo "# Telegram Chat IDs - one per line" > data/chat_ids.txt
          echo "# Lines starting with # are comments" >> data/chat_ids.txt
          echo "" >> data/chat_ids.txt
        fi
        
        echo ""
        echo "📋 Final chat state:"
        if [ -f data/chat_ids.txt ]; then
          echo "  File contents:"
          cat data/chat_ids.txt | head -10
          echo ""
          CHAT_COUNT=$(grep -v '^#' data/chat_ids.txt | grep -v '^$' | wc -l)
          echo "  Active chat IDs found: $CHAT_COUNT"
          if [ $CHAT_COUNT -gt 0 ]; then
            echo "  Chat IDs:"
            grep -v '^#' data/chat_ids.txt | grep -v '^$' | sed 's/^/    /'
          fi
        else
          echo "  (no data/chat_ids.txt file found)"
        fi
        
        echo ""
        echo "📊 Final apartment tracking state:"
        if [ -f "data/previous_apartment_ids.json" ]; then
          echo "  Tracking file exists:"
          cat data/previous_apartment_ids.json | head -5
          echo "  (file ready for next run)"
        else
          echo "  (no tracking file found)"
        fi
        
        echo "✅ Both persistent data files ready for upload"
    
    - name: Upload persistent data
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: apartment-tracking-data
        path: data/previous_apartment_ids.json
        retention-days: 90
        
    - name: Upload chat state
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: chat-ids-state
        path: data/chat_ids.txt
        retention-days: 90
        
    - name: Clean up output files
      if: always()
      run: |
        # Remove temporary files but keep persistent data (previous_apartment_ids.json, chat_ids.txt)
        rm -f data/halooglasi_data.json
        rm -f data/halooglasi_data.xlsx
        rm -f logs/*.log
        echo "🧹 Cleaned up temporary output files"
        echo "📁 Preserved persistent data files:"
        ls -la data/ | grep -E "(previous_apartment_ids\.json|chat_ids\.txt)" || echo "  No persistent files found" 