name: HaloOglasi Apartment Parser

on:
  schedule:
    # Run every 30 minutes from 8:00 AM to 8:00 PM UTC
    # This covers 8am-8pm in most European timezones
    - cron: '0,30 8-20 * * *'
  
  # Allow manual triggering
  workflow_dispatch:

jobs:
  parse-apartments:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create data and logs directories
      run: |
        mkdir -p data logs
    
    - name: Download previous apartment tracking data
      uses: actions/download-artifact@v4
      with:
        name: apartment-tracking-data
        path: data/
      continue-on-error: true  # Allow first run when no previous data exists
    
    - name: Check if tracking file exists
      run: |
        if [ ! -f "data/previous_apartment_ids.json" ]; then
          echo "📝 First run detected - no previous tracking data found"
          echo "All apartments will be marked as NEW in this run"
          echo '[]' > data/previous_apartment_ids.json
        else
          echo "✅ Previous tracking data loaded successfully"
        fi
    
    - name: Run apartment parser
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        cd scripts
        python run_search.py
    
    - name: Ensure tracking file exists before upload
      if: always()
      run: |
        if [ ! -f "data/previous_apartment_ids.json" ]; then
          echo "⚠️ Tracking file missing, creating empty one"
          echo '[]' > data/previous_apartment_ids.json
        fi
        echo "📁 Tracking file ready for upload"
    
    - name: Upload apartment tracking data for next run
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: apartment-tracking-data
        path: data/previous_apartment_ids.json
        retention-days: 90
    
    - name: Clean up output files
      if: always()
      run: |
        # Remove all generated files except previous_apartment_ids.json
        rm -f data/halooglasi_data.json
        rm -f data/halooglasi_data.xlsx
        rm -f logs/*.log
        echo "🧹 Cleaned up temporary output files" 