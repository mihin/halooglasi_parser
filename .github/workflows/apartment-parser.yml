name: HaloOglasi Apartment Parser

on:
  workflow_dispatch:
  schedule:
    # Run 3 times daily: 7am, 1pm, 7pm UTC
    - cron: '0 7,13,19 * * *'

jobs:
  apartment-search:
    runs-on: ubuntu-latest
    name: Search and Notify
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create data and logs directories
      run: |
        mkdir -p data logs
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Download previous apartment tracking data
      id: download-tracking-data
      uses: dawidd6/action-download-artifact@v3
      with:
        name: apartment-ids
        path: data/
        workflow: apartment-parser.yml
        if_no_artifact_found: warn
      continue-on-error: true
      
    - name: Debug artifact download
      run: |
        echo "üîç Artifact download result: ${{ steps.download-tracking-data.outcome }}"
        echo "üîç Files in data/ after download:"
        ls -la data/ || echo "  data/ directory not found"
        if [ -f "data/apartment-ids.json" ]; then
          echo "‚úÖ apartment-ids.json found"
          echo "üìä File size: $(wc -c < data/apartment-ids.json) bytes"
        else
          echo "‚ùå apartment-ids.json not found"
        fi
    
    - name: Initialize tracking file if needed
      run: |
        if [ ! -f "data/apartment-ids.json" ]; then
          echo "üîÑ First run or no previous tracking data found"
          echo "üìù Creating new tracking file - all apartments will be marked as NEW"
          cat > data/apartment-ids.json << 'EOF'
        {
          "ids": [],
          "last_updated": "1970-01-01T00:00:00",
          "count": 0
        }
        EOF
          echo "‚úÖ Initialized empty apartment tracking file"
        else
          echo "‚úÖ Previous tracking data restored successfully"
          echo "üìä Current tracking data:"
          cat data/apartment-ids.json | head -10
          echo "Will identify NEW vs EXISTING apartments"
        fi
    
    - name: Create config from secrets and variables
      run: |
        echo "üîß Creating configuration..."
        echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" > config.properties
        echo "NOTIFICATION_INTERVAL_HOURS=${{ vars.NOTIFICATION_INTERVAL_HOURS || '6' }}" >> config.properties
        
        # Debug Chat (moved to variables)
        if [ -n "${{ vars.DEBUG_CHAT }}" ]; then
          echo "DEBUG_CHAT=${{ vars.DEBUG_CHAT }}" >> config.properties
          echo "üîß DEBUG_CHAT set from repository variable"
        fi
        
        # Telegram Chat ID (exclusive mode)
        if [ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
          echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> config.properties
          echo "‚úÖ Exclusive chat mode enabled"
        else
          echo "‚úÖ Auto-discovery mode enabled"
        fi
        
        # Search Configuration Variables
        if [ -n "${{ vars.SEARCH_TYPE }}" ]; then
          echo "SEARCH_TYPE=${{ vars.SEARCH_TYPE }}" >> config.properties
          echo "üîß SEARCH_TYPE set to: ${{ vars.SEARCH_TYPE }}"
        fi
        
        if [ -n "${{ vars.PRICE_FROM }}" ]; then
          echo "PRICE_FROM=${{ vars.PRICE_FROM }}" >> config.properties
          echo "üîß PRICE_FROM set to: ${{ vars.PRICE_FROM }}"
        fi
        
        if [ -n "${{ vars.PRICE_TO }}" ]; then
          echo "PRICE_TO=${{ vars.PRICE_TO }}" >> config.properties
          echo "üîß PRICE_TO set to: ${{ vars.PRICE_TO }}"
        fi
        
        if [ -n "${{ vars.APARTMENT_AREA_FROM }}" ]; then
          echo "APARTMENT_AREA_FROM=${{ vars.APARTMENT_AREA_FROM }}" >> config.properties
          echo "üîß APARTMENT_AREA_FROM set to: ${{ vars.APARTMENT_AREA_FROM }}"
        fi
        
        if [ -n "${{ vars.APARTMENT_AREA_TO }}" ]; then
          echo "APARTMENT_AREA_TO=${{ vars.APARTMENT_AREA_TO }}" >> config.properties
          echo "üîß APARTMENT_AREA_TO set to: ${{ vars.APARTMENT_AREA_TO }}"
        fi
        
        if [ -n "${{ vars.NUMBER_OF_ROOMS_FROM }}" ]; then
          echo "NUMBER_OF_ROOMS_FROM=${{ vars.NUMBER_OF_ROOMS_FROM }}" >> config.properties
          echo "üîß NUMBER_OF_ROOMS_FROM set to: ${{ vars.NUMBER_OF_ROOMS_FROM }}"
        fi
        
        if [ -n "${{ vars.NUMBER_OF_ROOMS_TO }}" ]; then
          echo "NUMBER_OF_ROOMS_TO=${{ vars.NUMBER_OF_ROOMS_TO }}" >> config.properties
          echo "üîß NUMBER_OF_ROOMS_TO set to: ${{ vars.NUMBER_OF_ROOMS_TO }}"
        fi
        
        if [ -n "${{ vars.FLOOR_FROM }}" ]; then
          echo "FLOOR_FROM=${{ vars.FLOOR_FROM }}" >> config.properties
          echo "üîß FLOOR_FROM set to: ${{ vars.FLOOR_FROM }}"
        fi
        
        if [ -n "${{ vars.FLOOR_TO }}" ]; then
          echo "FLOOR_TO=${{ vars.FLOOR_TO }}" >> config.properties
          echo "üîß FLOOR_TO set to: ${{ vars.FLOOR_TO }}"
        fi
        
        echo ""
        echo "üìã Generated config.properties:"
        cat config.properties
        
    - name: Restore chat state (Auto-discovery mode only)
      id: restore-chat
      uses: dawidd6/action-download-artifact@v3
      with:
        name: chat-ids
        path: data/
        workflow: apartment-parser.yml
        if_no_artifact_found: warn
      continue-on-error: true
      
    - name: Initialize chat state file
      run: |
        # Only initialize chat state in auto-discovery mode
        if [[ -z "${{ vars.DEBUG_CHAT }}" && -z "${{ secrets.TELEGRAM_CHAT_ID }}" ]]; then
        if [ ! -f data/chat-ids.txt ]; then
          echo "üîÑ First run or no previous chat state found"
          echo "# Telegram Chat IDs - one per line" > data/chat-ids.txt
          echo "# Lines starting with # are comments" >> data/chat-ids.txt
          echo "" >> data/chat-ids.txt
          echo "‚úÖ Initialized empty data/chat-ids.txt"
                  else
            echo "‚úÖ Restored previous chat state"
            echo "üìã Current chat IDs:"
            grep -v '^#' data/chat-ids.txt | grep -v '^$' || echo "  (no active chats yet)"
          fi
        else
          echo "üîç Skipping chat state initialization - not in auto-discovery mode"
        fi
        
    - name: Run apartment search
      run: |
        echo "üè† Starting apartment search..."
        echo "üîç Current working directory: $(pwd)"
        echo "üîç Files in workspace root:"
        ls -la | grep -E "(config\.properties)" || echo "  No config files found"
        echo "üîç Files in data/ directory:"
        ls -la data/ | grep -E "(chat-ids\.txt|apartment-ids\.json)" || echo "  No data files found"
        echo ""
        python scripts/run_search.py
        echo "‚úÖ Search completed"
        
    - name: Check Telegram results
      id: telegram-results
      run: |
        echo "üìä Analyzing Telegram results..."
        
        if [ -f "data/telegram_result.json" ]; then
          echo "‚úÖ Telegram result file found"
          cat data/telegram_result.json
          
          # Extract values from the JSON
          MESSAGES_SENT=$(cat data/telegram_result.json | grep -o '"messages_sent": [0-9]*' | grep -o '[0-9]*')
          CHATS_FOUND=$(cat data/telegram_result.json | grep -o '"chats_found": [0-9]*' | grep -o '[0-9]*')
          SUCCESS=$(cat data/telegram_result.json | grep -o '"success": [a-z]*' | grep -o '[a-z]*')
          NEW_APARTMENTS=$(cat data/telegram_result.json | grep -o '"new_apartments_count": [0-9]*' | grep -o '[0-9]*')
          
          echo "messages_sent=$MESSAGES_SENT" >> $GITHUB_OUTPUT
          echo "chats_found=$CHATS_FOUND" >> $GITHUB_OUTPUT
          echo "success=$SUCCESS" >> $GITHUB_OUTPUT
          echo "new_apartments_count=$NEW_APARTMENTS" >> $GITHUB_OUTPUT
          
          echo "üìä Messages sent: $MESSAGES_SENT"
          echo "üìä Chats found: $CHATS_FOUND"
          echo "üìä Success: $SUCCESS"
          echo "üìä New apartments: $NEW_APARTMENTS"
        else
          echo "‚ùå No telegram result file found"
          echo "messages_sent=0" >> $GITHUB_OUTPUT
          echo "chats_found=0" >> $GITHUB_OUTPUT
          echo "success=false" >> $GITHUB_OUTPUT
          echo "new_apartments_count=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Finalize and upload persistent data
      if: always()
      run: |
        echo "üìÅ Preparing persistent data for upload..."
        
        # Ensure apartment tracking file exists
        if [ ! -f "data/apartment-ids.json" ]; then
          echo "‚ö†Ô∏è Tracking file missing, creating empty one"
          cat > data/apartment-ids.json << 'EOF'
        {
          "ids": [],
          "last_updated": "1970-01-01T00:00:00",
          "count": 0
        }
        EOF
        fi
        
        # Ensure chat state file exists (only in auto-discovery mode)
        if [[ -z "${{ vars.DEBUG_CHAT }}" && -z "${{ secrets.TELEGRAM_CHAT_ID }}" ]]; then
          if [ ! -f data/chat-ids.txt ]; then
            echo "‚ö†Ô∏è Chat state file missing, creating empty one"
            echo "# Telegram Chat IDs - one per line" > data/chat-ids.txt
            echo "# Lines starting with # are comments" >> data/chat-ids.txt
            echo "" >> data/chat-ids.txt
          fi
        fi
        
        echo ""
        echo "üìã Final chat state:"
        if [[ -z "${{ vars.DEBUG_CHAT }}" && -z "${{ secrets.TELEGRAM_CHAT_ID }}" ]]; then
          if [ -f data/chat-ids.txt ]; then
            echo "  File contents:"
            cat data/chat-ids.txt | head -10
            echo ""
            CHAT_COUNT=$(grep -v '^#' data/chat-ids.txt | grep -v '^$' | wc -l)
            echo "  Active chat IDs found: $CHAT_COUNT"
            if [ $CHAT_COUNT -gt 0 ]; then
              echo "  Chat IDs:"
              grep -v '^#' data/chat-ids.txt | grep -v '^$' | sed 's/^/    /'
            fi
          else
            echo "  (no data/chat-ids.txt file found)"
          fi
        else
          echo "  (skipped - not in auto-discovery mode)"
        fi
        
        echo ""
        echo "üìä Final apartment tracking state:"
        if [ -f "data/apartment-ids.json" ]; then
          echo "  Tracking file exists:"
          cat data/apartment-ids.json | head -5
          echo "  (file ready for next run)"
        else
          echo "  (no tracking file found)"
        fi
        
        echo "‚úÖ Both persistent data files ready for upload"
    
    - name: Debug before upload
      if: always()
      run: |
        echo "üîç Pre-upload verification:"
        ls -la data/ || echo "  data/ directory not found"
        if [ -f "data/apartment-ids.json" ]; then
          echo "‚úÖ apartment-ids.json exists for upload"
          echo "üìä File size: $(wc -c < data/apartment-ids.json) bytes"
          echo "üìÑ File content preview:"
          head -3 data/apartment-ids.json
        else
          echo "‚ùå apartment-ids.json missing for upload!"
        fi
    
    - name: Decide apartment tracking upload
      if: always()
      run: |
        echo "üîç Determining if apartment tracking should be uploaded..."
        echo "üîç Messages sent successfully: ${{ steps.telegram-results.outputs.success }}"
        echo "üîç New apartments count: ${{ steps.telegram-results.outputs.new_apartments_count }}"
        
        if [[ "${{ steps.telegram-results.outputs.success }}" == "true" || "${{ steps.telegram-results.outputs.new_apartments_count }}" == "0" ]]; then
          echo "‚úÖ Will upload apartment tracking - either messages sent or no new apartments"
        else
          echo "‚ùå Will NOT upload apartment tracking - messages failed and new apartments exist"
          echo "‚ùå This prevents marking apartments as 'seen' when notifications failed"
        fi
        
    - name: Upload apartment tracking data
      if: always() && (steps.telegram-results.outputs.success == 'true' || steps.telegram-results.outputs.new_apartments_count == '0')
      uses: actions/upload-artifact@v4
      with:
        name: apartment-ids
        path: data/apartment-ids.json
        retention-days: 90
        if-no-files-found: warn
        
    - name: Decide chat state upload
      if: always()
      run: |
        echo "üîç Determining if chat state should be uploaded..."
        echo "üîç Chats found: ${{ steps.telegram-results.outputs.chats_found }}"
        echo "üîç TELEGRAM_CHAT_ID configured: ${{ secrets.TELEGRAM_CHAT_ID != '' }}"
        echo "üîç DEBUG_CHAT configured: ${{ vars.DEBUG_CHAT != '' }}"
        
        # Upload if chats were found OR if in auto-discovery mode (no exclusive config)
        if [[ "${{ steps.telegram-results.outputs.chats_found }}" != "0" ]]; then
          echo "‚úÖ Will upload chat state - chats were found/used"
        elif [[ -z "${{ secrets.TELEGRAM_CHAT_ID }}" && -z "${{ vars.DEBUG_CHAT }}" ]]; then
          echo "‚úÖ Will upload chat state - auto-discovery mode (even if empty for next run)"
        else
          echo "‚ùå Will NOT upload chat state - exclusive mode with no chats"
        fi
        
    - name: Upload chat state
      if: always() && (steps.telegram-results.outputs.chats_found != '0' || (env.TELEGRAM_CHAT_ID == '' && env.DEBUG_CHAT == ''))
      uses: actions/upload-artifact@v4
      with:
        name: chat-ids
        path: data/chat-ids.txt
        retention-days: 90
        if-no-files-found: warn
      continue-on-error: true
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        DEBUG_CHAT: ${{ vars.DEBUG_CHAT }}
        
    - name: Clean up output files
      if: always()
      run: |
        # Remove temporary files but keep persistent data (previous_apartment_ids.json, chat_ids.txt)
        rm -f data/halooglasi_data.json
        rm -f data/halooglasi_data.xlsx
        rm -f logs/*.log
        echo "üßπ Cleaned up temporary output files"
        echo "üìÅ Preserved persistent data files:"
        ls -la data/ | grep -E "(apartment-ids\.json|chat-ids\.txt)" || echo "  No persistent files found" 